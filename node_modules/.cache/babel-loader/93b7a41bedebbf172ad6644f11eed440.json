{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oliver.james.aco\\\\OneDrive - Accenture\\\\desktop\\\\Oliver\\\\form-validation\\\\form-validation\\\\src\\\\components\\\\SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const [enteredName, setEnteredName] = useState('');\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  const enteredNameIsValid = enteredName.trim() !== '';\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value);\n  };\n\n  const nameInputBlurHandler = event => {\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === '') {\n      setEnteredNameIsValid(false);\n    }\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === '') {\n      setEnteredNameIsValid(false);\n      return;\n    }\n\n    setEnteredNameIsValid(true);\n    console.log(enteredName);\n    const enteredValue = nameInputRef.current.value;\n    console.log(enteredValue);\n    setEnteredName('');\n  };\n\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: nameInputRef,\n        type: \"text\",\n        id: \"name\",\n        value: enteredName,\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 7\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 10\n  }, this);\n};\n\n_s(SimpleInput, \"VUm+G9YkVtHi/Fjk92HS4+x5TZ8=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["C:/Users/oliver.james.aco/OneDrive - Accenture/desktop/Oliver/form-validation/form-validation/src/components/SimpleInput.js"],"names":["useState","SimpleInput","props","enteredName","setEnteredName","enteredNameTouched","setEnteredNameTouched","enteredNameIsValid","trim","nameInputChangeHandler","event","target","value","nameInputBlurHandler","setEnteredNameIsValid","formSubmissionHandler","preventDefault","console","log","enteredValue","nameInputRef","current","nameInputIsInvalid","nameInputClasses"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;;AAEA,MAAMC,WAAW,GAAGC,KAAK,IAAI;AAAA;;AAC3B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACK,kBAAD,EAAqBC,qBAArB,IAA8CN,QAAQ,CAAC,KAAD,CAA5D;AAEA,QAAMO,kBAAkB,GAAGJ,WAAW,CAACK,IAAZ,OAAuB,EAAlD;;AAEA,QAAMC,sBAAsB,GAAGC,KAAK,IAAI;AACtCN,IAAAA,cAAc,CAACM,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAd;AACD,GAFD;;AAIA,QAAMC,oBAAoB,GAAGH,KAAK,IAAI;AACpCJ,IAAAA,qBAAqB,CAAC,IAAD,CAArB;;AAEA,QAAIH,WAAW,CAACK,IAAZ,OAAuB,EAA3B,EAA+B;AAC7BM,MAAAA,qBAAqB,CAAC,KAAD,CAArB;AACD;AACF,GAND;;AAQA,QAAMC,qBAAqB,GAAGL,KAAK,IAAI;AACrCA,IAAAA,KAAK,CAACM,cAAN;AAEAV,IAAAA,qBAAqB,CAAC,IAAD,CAArB;;AAEA,QAAIH,WAAW,CAACK,IAAZ,OAAuB,EAA3B,EAA+B;AAC7BM,MAAAA,qBAAqB,CAAC,KAAD,CAArB;AACA;AACD;;AAEDA,IAAAA,qBAAqB,CAAC,IAAD,CAArB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYf,WAAZ;AACA,UAAMgB,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqBT,KAA1C;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYC,YAAZ;AAEAf,IAAAA,cAAc,CAAC,EAAD,CAAd;AACD,GAhBD;;AAkBA,QAAMkB,kBAAkB,GAAG,CAACf,kBAAD,IAAuBF,kBAAlD;AACA,QAAMkB,gBAAgB,GAAGD,kBAAkB,GAAG,sBAAH,GAA4B,cAAvE;AAEA,sBAAO;AAAM,IAAA,QAAQ,EAAEP,qBAAhB;AAAA,4BACL;AAAK,MAAA,SAAS,EAAEQ,gBAAhB;AAAA,8BACE;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AACE,QAAA,GAAG,EAAEH,YADP;AAEE,QAAA,IAAI,EAAC,MAFP;AAGE,QAAA,EAAE,EAAC,MAHL;AAIE,QAAA,KAAK,EAAEjB,WAJT;AAKE,QAAA,QAAQ,EAAEM,sBALZ;AAME,QAAA,MAAM,EAAEI;AANV;AAAA;AAAA;AAAA;AAAA,cAFF,EAUGS,kBAAkB,iBAAI;AAAG,QAAA,SAAS,EAAC,YAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAVzB;AAAA;AAAA;AAAA;AAAA;AAAA,YADK,eAaL;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAbK;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAiBD,CAxDD;;GAAMrB,W;;KAAAA,W;AA2DN,eAAeA,WAAf","sourcesContent":["import { useState } from 'react'\n\nconst SimpleInput = props => {\n  const [enteredName, setEnteredName] = useState('')\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false)\n\n  const enteredNameIsValid = enteredName.trim() !== '';\n\n  const nameInputChangeHandler = event => {\n    setEnteredName(event.target.value)\n  }\n\n  const nameInputBlurHandler = event => {\n    setEnteredNameTouched(true)\n\n    if (enteredName.trim() === '') {\n      setEnteredNameIsValid(false)\n    }\n  }\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n\n    setEnteredNameTouched(true)\n\n    if (enteredName.trim() === '') {\n      setEnteredNameIsValid(false)\n      return;\n    }\n\n    setEnteredNameIsValid(true)\n    console.log(enteredName);\n    const enteredValue = nameInputRef.current.value;\n    console.log(enteredValue)\n\n    setEnteredName('')\n  }\n\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control';\n\n  return <form onSubmit={formSubmissionHandler}>\n    <div className={nameInputClasses}>\n      <label htmlFor=\"name\">Your Name</label>\n      <input\n        ref={nameInputRef}\n        type=\"text\"\n        id=\"name\"\n        value={enteredName}\n        onChange={nameInputChangeHandler}\n        onBlur={nameInputBlurHandler}\n      />\n      {nameInputIsInvalid && <p className=\"error-text\">Name must not be empty.</p>}\n    </div>\n    <div className=\"form-actions\">\n      <button>Submit</button>\n    </div>\n  </form>\n}\n\n\nexport default SimpleInput"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oliver.james.aco\\\\OneDrive - Accenture\\\\desktop\\\\Oliver\\\\form-validation\\\\form-validation\\\\src\\\\components\\\\SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport useInput from '../hooks/use-input';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameHasError,\n    valueChangeHandler: nameChangeHandler,\n    valueBlurHandler: nameBlurHandler,\n    reset: resetName\n  } = useInput(value => value.trim() === '');\n  const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    hasError: emailHasError,\n    valueChangeHandler: emailChangeHandler,\n    valueBlurHandler: emailBlurHandler,\n    reset: resetEmail\n  } = useInput(value => enteredEmail.trim() !== '' && enteredEmail.includes('@')); // const [enteredName, setEnteredName] = useState('');\n  // const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  // const enteredNameIsValid = enteredName.trim() !== '';\n  // const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  // const [enteredEmail, setEnteredEmail] = useState('');\n  // const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  // const enteredEmailIsValid = enteredEmail.trim() !== '' && enteredEmail.includes('@');\n  // const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  } // const inputChangeHandler = event => {\n  //   const { type, value } = event.target;\n  //   if (type === \"text\") {\n  //     setEnteredName(value)\n  //   } else {\n  //     setEnteredEmail(value)\n  //   }\n  // }\n  // const inputBlurHandler = event => {\n  //   const { type } = event.target;\n  //   if (type === \"text\") {\n  //     setEnteredNameTouched(true)\n  //   } else {\n  //     setEnteredEmailTouched(true)\n  //   }\n  // }\n\n\n  const formSubmissionHandler = event => {\n    event.preventDefault(); // setEnteredNameTouched(true)\n    // setEnteredEmailTouched(true)\n\n    if (!enteredNameIsValid && !enteredEmailIsValid) {\n      return;\n    }\n\n    resetName();\n    resetEmail(); // setEnteredName('')\n    // setEnteredNameTouched(false)\n    // setEnteredEmail('')\n    // setEnteredEmailTouched(false)\n  };\n\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control';\n  const emailInputClasses = emailInputIsInvalid ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        value: enteredName,\n        onChange: inputChangeHandler,\n        onBlur: inputBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 7\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        value: enteredEmail,\n        onChange: inputChangeHandler,\n        onBlur: inputBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 7\n      }, this), emailInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Email is not valid.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 10\n  }, this);\n};\n\n_s(SimpleInput, \"1UZMjU/snx3p5mxqxy95YpkFFnA=\", false, function () {\n  return [useInput, useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["C:/Users/oliver.james.aco/OneDrive - Accenture/desktop/Oliver/form-validation/form-validation/src/components/SimpleInput.js"],"names":["useState","useInput","SimpleInput","props","value","enteredName","isValid","enteredNameIsValid","hasError","nameHasError","valueChangeHandler","nameChangeHandler","valueBlurHandler","nameBlurHandler","reset","resetName","trim","enteredEmail","enteredEmailIsValid","emailHasError","emailChangeHandler","emailBlurHandler","resetEmail","includes","formIsValid","formSubmissionHandler","event","preventDefault","nameInputClasses","nameInputIsInvalid","emailInputClasses","emailInputIsInvalid","inputChangeHandler","inputBlurHandler"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport useInput from '../hooks/use-input';\n\nconst SimpleInput = props => {\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameHasError,\n    valueChangeHandler: nameChangeHandler,\n    valueBlurHandler: nameBlurHandler,\n    reset: resetName\n  } = useInput(value => value.trim() === '');\n\n  const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    hasError: emailHasError,\n    valueChangeHandler: emailChangeHandler,\n    valueBlurHandler: emailBlurHandler,\n    reset: resetEmail\n  } = useInput(value => enteredEmail.trim() !== '' && enteredEmail.includes('@'));\n\n  // const [enteredName, setEnteredName] = useState('');\n  // const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  // const enteredNameIsValid = enteredName.trim() !== '';\n  // const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n\n  // const [enteredEmail, setEnteredEmail] = useState('');\n  // const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  // const enteredEmailIsValid = enteredEmail.trim() !== '' && enteredEmail.includes('@');\n  // const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n\n  // const inputChangeHandler = event => {\n  //   const { type, value } = event.target;\n\n  //   if (type === \"text\") {\n  //     setEnteredName(value)\n  //   } else {\n  //     setEnteredEmail(value)\n  //   }\n  // }\n\n  // const inputBlurHandler = event => {\n  //   const { type } = event.target;\n\n  //   if (type === \"text\") {\n  //     setEnteredNameTouched(true)\n  //   } else {\n  //     setEnteredEmailTouched(true)\n  //   }\n  // }\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n\n    // setEnteredNameTouched(true)\n    // setEnteredEmailTouched(true)\n\n    if (!enteredNameIsValid && !enteredEmailIsValid) {\n      return;\n    }\n\n    resetName();\n    resetEmail();\n\n    // setEnteredName('')\n    // setEnteredNameTouched(false)\n\n    // setEnteredEmail('')\n    // setEnteredEmailTouched(false)\n  }\n\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control';\n  const emailInputClasses = emailInputIsInvalid ? 'form-control invalid' : 'form-control';\n\n\n  return <form onSubmit={formSubmissionHandler}>\n    <div className={nameInputClasses}>\n      <label htmlFor=\"name\">Your Name</label>\n      <input\n        type=\"text\"\n        id=\"name\"\n        value={enteredName}\n        onChange={inputChangeHandler}\n        onBlur={inputBlurHandler}\n      />\n      {nameInputIsInvalid && <p className=\"error-text\">Name must not be empty.</p>}\n    </div>\n    <div className={emailInputClasses}>\n      <label htmlFor=\"email\">Your Email</label>\n      <input\n        type=\"email\"\n        id=\"email\"\n        value={enteredEmail}\n        onChange={inputChangeHandler}\n        onBlur={inputBlurHandler}\n      />\n      {emailInputIsInvalid && <p className=\"error-text\">Email is not valid.</p>}\n    </div>\n    <div className=\"form-actions\">\n      <button disabled={!formIsValid}>Submit</button>\n    </div>\n  </form>\n}\n\n\nexport default SimpleInput"]},"metadata":{},"sourceType":"module"}
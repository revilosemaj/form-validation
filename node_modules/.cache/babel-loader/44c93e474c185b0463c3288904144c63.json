{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oliver.james.aco\\\\OneDrive - Accenture\\\\desktop\\\\Oliver\\\\form-validation\\\\form-validation\\\\src\\\\components\\\\SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport useInput from '../hooks/use-input';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const {\n    value: enteredValue,\n    isValid: valueIsValid,\n    hasError,\n    valueChangeHandler,\n    valueBlurHandler,\n    reset\n  } = useInput(value => value.trim() === '');\n  const [enteredName, setEnteredName] = useState('');\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  const enteredNameIsValid = enteredName.trim() !== '';\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const [enteredEmail, setEnteredEmail] = useState('');\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  const enteredEmailIsValid = enteredEmail.trim() !== '' && enteredEmail.includes('@');\n  const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n\n  const inputChangeHandler = event => {\n    const {\n      type,\n      value\n    } = event.target;\n\n    if (type === \"text\") {\n      setEnteredName(value);\n    } else {\n      setEnteredEmail(value);\n    }\n  };\n\n  const inputBlurHandler = event => {\n    const {\n      type\n    } = event.target;\n\n    if (type === \"text\") {\n      setEnteredNameTouched(true);\n    } else {\n      setEnteredEmailTouched(true);\n    }\n  };\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n    setEnteredEmailTouched(true);\n\n    if (!enteredNameIsValid && !enteredEmailIsValid) {\n      return;\n    }\n\n    setEnteredName('');\n    setEnteredNameTouched(false);\n    setEnteredEmail('');\n    setEnteredEmailTouched(false);\n  };\n\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control';\n  const emailInputClasses = emailInputIsInvalid ? 'form-control invalid' : 'form-control';\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        value: enteredName,\n        onChange: inputChangeHandler,\n        onBlur: inputBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 7\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"email\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        value: enteredEmail,\n        onChange: inputChangeHandler,\n        onBlur: inputBlurHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }, this), emailInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Email is not valid.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 10\n  }, this);\n};\n\n_s(SimpleInput, \"3GjCJoaC/aB/iYWpP8cGdI5J9l0=\", false, function () {\n  return [useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"sources":["C:/Users/oliver.james.aco/OneDrive - Accenture/desktop/Oliver/form-validation/form-validation/src/components/SimpleInput.js"],"names":["useState","useInput","SimpleInput","props","value","enteredValue","isValid","valueIsValid","hasError","valueChangeHandler","valueBlurHandler","reset","trim","enteredName","setEnteredName","enteredNameTouched","setEnteredNameTouched","enteredNameIsValid","nameInputIsInvalid","enteredEmail","setEnteredEmail","enteredEmailTouched","setEnteredEmailTouched","enteredEmailIsValid","includes","emailInputIsInvalid","formIsValid","inputChangeHandler","event","type","target","inputBlurHandler","formSubmissionHandler","preventDefault","nameInputClasses","emailInputClasses"],"mappings":"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","sourcesContent":["import { useState } from 'react';\nimport useInput from '../hooks/use-input';\n\nconst SimpleInput = props => {\n  const {\n    value: enteredValue,\n    isValid: valueIsValid,\n    hasError,\n    valueChangeHandler,\n    valueBlurHandler,\n    reset\n  } = useInput(value => value.trim() === '');\n  const [enteredName, setEnteredName] = useState('');\n  const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  const enteredNameIsValid = enteredName.trim() !== '';\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n\n  const [enteredEmail, setEnteredEmail] = useState('');\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  const enteredEmailIsValid = enteredEmail.trim() !== '' && enteredEmail.includes('@');\n  const emailInputIsInvalid = !enteredEmailIsValid && enteredEmailTouched;\n\n  let formIsValid = false;\n\n  if (enteredNameIsValid && enteredEmailIsValid) {\n    formIsValid = true;\n  }\n\n  const inputChangeHandler = event => {\n    const { type, value } = event.target;\n\n    if (type === \"text\") {\n      setEnteredName(value)\n    } else {\n      setEnteredEmail(value)\n    }\n  }\n\n  const inputBlurHandler = event => {\n    const { type } = event.target;\n\n    if (type === \"text\") {\n      setEnteredNameTouched(true)\n    } else {\n      setEnteredEmailTouched(true)\n    }\n  }\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n\n    setEnteredNameTouched(true)\n    setEnteredEmailTouched(true)\n\n    if (!enteredNameIsValid && !enteredEmailIsValid) {\n      return;\n    }\n\n    setEnteredName('')\n    setEnteredNameTouched(false)\n\n    setEnteredEmail('')\n    setEnteredEmailTouched(false)\n  }\n\n  const nameInputClasses = nameInputIsInvalid ? 'form-control invalid' : 'form-control';\n  const emailInputClasses = emailInputIsInvalid ? 'form-control invalid' : 'form-control';\n\n\n  return <form onSubmit={formSubmissionHandler}>\n    <div className={nameInputClasses}>\n      <label htmlFor=\"name\">Your Name</label>\n      <input\n        type=\"text\"\n        id=\"name\"\n        value={enteredName}\n        onChange={inputChangeHandler}\n        onBlur={inputBlurHandler}\n      />\n      {nameInputIsInvalid && <p className=\"error-text\">Name must not be empty.</p>}\n    </div>\n    <div className={emailInputClasses}>\n      <label htmlFor=\"email\">Your Email</label>\n      <input\n        type=\"email\"\n        id=\"email\"\n        value={enteredEmail}\n        onChange={inputChangeHandler}\n        onBlur={inputBlurHandler}\n      />\n      {emailInputIsInvalid && <p className=\"error-text\">Email is not valid.</p>}\n    </div>\n    <div className=\"form-actions\">\n      <button disabled={!formIsValid}>Submit</button>\n    </div>\n  </form>\n}\n\n\nexport default SimpleInput"]},"metadata":{},"sourceType":"module"}